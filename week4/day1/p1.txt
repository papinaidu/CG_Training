abstract class WarehouseItem {
   String name;
   WarehouseItem(String name) {
       this.name = name;
   }
   String getName() {
       return name;
   }
   public abstract void displayName();
}

class Electronics extends WarehouseItem{
   Electronics(String name) {
       super(name);
   }

   @Override
   public void displayName() {
       System.out.println("Name: " + getName());
   }
}

class Groceries extends WarehouseItem{
   Groceries(String name) {
       super(name);
   }

   @Override
   public void displayName() {
       System.out.println("Name: " + getName());
   }
}

class Furniture extends WarehouseItem{
   Furniture(String name) {
       super(name);
   }

   @Override
   public void displayName() {
       System.out.println("Name: " + getName());
   }
}

class Storage<T extends WarehouseItem> {
   List<T> items = new ArrayList<>();
   public void addItem (T item) {
       this.items.add(item);
   }

   public List<T> getItem() {
       return items;
   }
}
public class Main {
   public static void displayItems(List<? extends WarehouseItem>  items) {
       for (WarehouseItem item : items) {
           item.displayName();
       }
   }
   public static void main(String[] args) {
       Storage<Electronics> electronics = new Storage<>();
       electronics.addItem(new Electronics("Fan"));
       electronics.addItem(new Electronics("Light"));

       Storage<Groceries>  groceries = new Storage<>();
       groceries.addItem(new Groceries("apple"));
       groceries.addItem(new Groceries("orange"));
       groceries.addItem(new Groceries("Milk"));

       Storage<Furniture> furniture = new Storage<>();
       furniture.addItem(new Furniture("Desk"));
       furniture.addItem(new Furniture("Chair"));
       furniture.addItem(new Furniture("Sofa"));

       displayItems(electronics.getItem());
       System.out.println();
       displayItems(groceries.getItem());
       System.out.println();
       displayItems(furniture.getItem());

   }
}